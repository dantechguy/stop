from prefs import prefs

block_to_code = {
              'motion_movesteps': {'indent': True,  'code': 'self.move_steps({steps})'},
              'motion_turnright': {'indent': True,  'code': 'self.turn_right_degrees({degrees})'},
               'motion_turnleft': {'indent': True,  'code': 'self.turn_left_degrees({degrees})'},
       'motion_pointindirection': {'indent': True,  'code': 'self.point_in_direction({direction})'},
      'motion_pointtowards_menu': {'indent': False, 'code': '{towards}'},
           'motion_pointtowards': {'indent': True,  'code': 'self.point_towards({towards})'},
              'motion_goto_menu': {'indent': False, 'code': '{to}'},
                 'motion_gotoxy': {'indent': True,  'code': 'self.go_to_x_y({x}, {y})'},
                   'motion_goto': {'indent': True,  'code': 'self.go_to_x_y({to})'},
          'motion_glidesecstoxy': {'indent': True,  'code': 'self.glide_seconds_x_y({secs}, {x}, {y})'},
           'motion_glideto_menu': {'indent': False, 'code': '{to}'},
                'motion_glideto': {'indent': True,  'code': 'self.glide_seconds_to({to}, {secs})'},
              'motion_changexby': {'indent': True,  'code': 'self.change_x_by({dx})'},
                   'motion_setx': {'indent': True,  'code': 'self.set_x_to({x})'},
              'motion_changeyby': {'indent': True,  'code': 'self.change_y_by({dy})'},
                   'motion_sety': {'indent': True,  'code': 'self.set_y_to({y})'},
         'motion_ifonedgebounce': {'indent': True,  'code': 'self.if_on_edge_bounce()'},
       'motion_setrotationstyle': {'indent': True,  'code': 'self.set_rotation_style({style})'},
              'motion_xposition': {'indent': False, 'code': 'self.x()'},
              'motion_yposition': {'indent': False, 'code': 'self.y()'},
              'motion_direction': {'indent': False, 'code': 'self.direction()'},
           'motion_scroll_right': {'indent': True,  'code': ''},
              'motion_scroll_up': {'indent': True,  'code': ''},
            'motion_align_scene': {'indent': True,  'code': ''},
                'motion_xscroll': {'indent': False, 'code': ''},
                'motion_yscroll': {'indent': False, 'code': ''},
              'looks_sayforsecs': {'indent': True,  'code': 'self.say_for_seconds({message}, {secs})'},
                     'looks_say': {'indent': True,  'code': 'self.say({message})'},
            'looks_thinkforsecs': {'indent': True,  'code': 'self.think_for_seconds({message}, {secs})'},
                   'looks_think': {'indent': True,  'code': 'self.think({message})'},
                    'looks_show': {'indent': True,  'code': 'self.show()'},
                    'looks_hide': {'indent': True,  'code': 'self.hide()'},
          'looks_hideallsprites': {'indent': True,  'code': ''},
          'looks_changeeffectby': {'indent': True,  'code': 'self.change_look_effect_by({effect}, {change})'},
             'looks_seteffectto': {'indent': True,  'code': 'self.set_look_effect_to({effect}, {value})'},
     'looks_cleargraphiceffects': {'indent': True,  'code': 'self.clear_graphic_effects()'},
            'looks_changesizeby': {'indent': True,  'code': 'self.change_size_by({change})'},
               'looks_setsizeto': {'indent': True,  'code': 'self.set_size_to({size})'},
                    'looks_size': {'indent': False, 'code': 'self.size()'},
         'looks_changestretchby': {'indent': True,  'code': ''},
            'looks_setstretchto': {'indent': True,  'code': ''},
                 'looks_costume': {'indent': False, 'code': '{costume}'},
         'looks_switchcostumeto': {'indent': True,  'code': 'self.switch_costume_to({costume})'},
             'looks_nextcostume': {'indent': True,  'code': 'self.next_costume()'},
        'looks_switchbackdropto': {'indent': True,  'code': '{0}.switch_backdrop_to()'.format(prefs.project_variable_name)},
               'looks_backdrops': {'indent': False, 'code': '{backdrop}'},
           'looks_gotofrontback': {'indent': True,  'code': 'self.go_to_{front_back}_layer()'},
 'looks_goforwardbackwardlayers': {'indent': True,  'code': 'self.go_{forward_backward}_layers({num})'},
      'looks_backdropnumbername': {'indent': False, 'code': ''},
       'looks_costumenumbername': {'indent': False, 'code': 'self.costume_{number_name}()'},
 'looks_switchbackdroptoandwait': {'indent': True,  'code': ''},
            'looks_nextbackdrop': {'indent': True,  'code': '{0}.next_backdrop()'.format(prefs.project_variable_name)},
             'sound_sounds_menu': {'indent': False, 'code': '{sound_menu}'},
                    'sound_play': {'indent': True,  'code': 'self.play_sound({sound_menu})'},
           'sound_playuntildone': {'indent': True,  'code': 'self.play_sound_until_done({sound_menu})'},
           'sound_stopallsounds': {'indent': True,  'code': '{0}.stop_all_sounds()'.format(prefs.project_variable_name)},
             'sound_seteffectto': {'indent': True,  'code': 'self.set_sound_effect_to({effect}, {value})'},
          'sound_changeeffectby': {'indent': True,  'code': 'self.change_sound_effect_by({effect}, {value})'},
            'sound_cleareffects': {'indent': True,  'code': 'self.clear_sound_effects()'},
          'sound_changevolumeby': {'indent': True,  'code': 'self.change_volume_by({volume})'},
             'sound_setvolumeto': {'indent': True,  'code': 'self.set_volume_to({volume})'},
                  'sound_volume': {'indent': False, 'code': 'self.volume()'},
      'event_whentouchingobject': {'indent': False, 'code': 'self.touching()'},
      'event_touchingobjectmenu': {'indent': False, 'code': ''},
         'event_whenflagclicked': {'indent': True,  'code': '{0}{green_flag_method_index}(self):'.format(prefs.green_flag_method_prefix)}, # custom input field
   'event_whenthisspriteclicked': {'indent': True,  'code': '{0}{sprite_clicked_method_index}(self):'.format(prefs.sprite_clicked_method_prefix)}, # custom input field
        'event_whenstageclicked': {'indent': True,  'code': ''},
   'event_whenbroadcastreceived': {'indent': True,  'code': '{0}{receive_broadcast_method_index}'.format(prefs.receive_broadcast_method_prefix)}, # broadcast_option  # custom input field
  'event_whenbackdropswitchesto': {'indent': True,  'code': '{0}{backdrop_switches_to_method_index}(self):'.format(prefs.backdrop_switches_to_method_prefix)}, # backdrop  # custom input field
         'event_whengreaterthan': {'indent': True,  'code': '{0}_{whengreaterthanmenu}{more_than_method_index}'}, # whengreaterthanmenu  # custom input field
          'event_broadcast_menu': {'indent': False, 'code': ''},
               'event_broadcast': {'indent': True,  'code': '{0}.events.send_receive_broadcast_event({broadcast_input})'.format(prefs.project_variable_name)}, # broadcast_input
        'event_broadcastandwait': {'indent': True,  'code': ''}, # broadcast_input
          'event_whenkeypressed': {'indent': True,  'code': '{0}{key_pressed_method_index}(self):'.format(prefs.project_variable_name)}, # key_option
               'control_forever': {'indent': True,  'code': 'while True:\n{substack}'},
                'control_repeat': {'indent': True,  'code': 'for i in range({times}):'},
                    'control_if': {'indent': True,  'code': 'if {condition}:\n{substack}'},
               'control_if_else': {'indent': True,  'code': 'if {condition}:\n{substack}\nelse:\n{substack2}'},
                  'control_stop': {'indent': True,  'code': ''},
                  'control_wait': {'indent': True,  'code': '{0}.wait({duration})'.format(prefs.project_variable_name)},
            'control_wait_until': {'indent': True,  'code': 'while not {condition}:\n{0}.wait()'.format(prefs.project_variable_name)},
          'control_repeat_until': {'indent': True,  'code': 'while not {condition}:\n{substack}\n{0}.wait()'.format(prefs.project_variable_name)},
                 'control_while': {'indent': True,  'code': ''},
              'control_for_each': {'indent': True,  'code': ''},
        'control_start_as_clone': {'indent': True,  'code': '{0}(self):'.format(prefs.clone_method_name)}, # event
  'control_create_clone_of_menu': {'indent': False, 'code': '{clone_option}'},
       'control_create_clone_of': {'indent': True,  'code': '{0}{clone_option}.clone()'.format(prefs.sprite_variable_prefix)},
     'control_delete_this_clone': {'indent': True,  'code': 'self.delete()'},
           'control_get_counter': {'indent': False, 'code': ''},
          'control_incr_counter': {'indent': False, 'code': ''},
         'control_clear_counter': {'indent': False, 'code': ''},
           'control_all_at_once': {'indent': False, 'code': ''},
        'sensing_touchingobject': {'indent': False, 'code': 'self.touching({touchingobjectmenu})'},
    'sensing_touchingobjectmenu': {'indent': False, 'code': '{touchingobjectmenu}'},
         'sensing_touchingcolor': {'indent': False, 'code': 'self.touching_{0}({color})'.format(prefs.col)},
  'sensing_coloristouchingcolor': {'indent': False, 'code': 'self.{0}_is_touching_{0}({color}, {color2})'.format(prefs.col)},
            'sensing_distanceto': {'indent': False, 'code': 'self.distance_to({distancetomenu})'},
        'sensing_distancetomenu': {'indent': False, 'code': '{distancetomenu}'},
            'sensing_askandwait': {'indent': True,  'code': 'self.ask_and_wait({question})'},
                'sensing_answer': {'indent': False, 'code': 'self.answer()'},
            'sensing_keypressed': {'indent': False, 'code': '{0}.sensing.key_pressed({key_option})'.format(prefs.project_variable_name)},
            'sensing_keyoptions': {'indent': False, 'code': '{key_option}'},
             'sensing_mousedown': {'indent': False, 'code': '{0}.sensing.mouse_down()'.format(prefs.project_variable_name)},
                'sensing_mousex': {'indent': False, 'code': '{0}.sensing.mouse_x()'.format(prefs.project_variable_name)},
                'sensing_mousey': {'indent': False, 'code': '{0}.sensing.mouse_y()'},
           'sensing_setdragmode': {'indent': True,  'code': 'self.set_drag_mode({drag_mode})'},
              'sensing_loudness': {'indent': False, 'code': 'self.loudness()'},
                  'sensing_loud': {'indent': False, 'code': ''},
                 'sensing_timer': {'indent': False, 'code': '{0}.time.timer()'.format(prefs.project_variable_name)},
            'sensing_resettimer': {'indent': True,  'code': '{0}.time.reset_timer()'.format(prefs.project_variable_name)},
        'sensing_of_object_menu': {'indent': False, 'code': '{object}'},
                    'sensing_of': {'indent': False, 'code': '{object}.{property}()'}, # convert property to method
               'sensing_current': {'indent': False, 'code': '{0}.time.{current}()'.format(prefs.project_variable_name)},
         'sensing_dayssince2000': {'indent': False, 'code': '{0}.time.days_since_2000()'.format(prefs.project_variable_name)},
              'sensing_username': {'indent': False, 'code': '{0}.username()'.format(prefs.project_variable_name)},
                'sensing_userid': {'indent': False, 'code': ''},
                  'operator_add': {'indent': False, 'code': '{0}.math.add({num1}, {num2})'.format(prefs.project_variable_name)},
             'operator_subtract': {'indent': False, 'code': '{0}.math.sub({num1}, {num2})'.format(prefs.project_variable_name)},
             'operator_multiply': {'indent': False, 'code': '{0}.math.mul({num1}, {num2})'.format(prefs.project_variable_name)},
               'operator_divide': {'indent': False, 'code': '{0}.math.div({num1}, {num2})'.format(prefs.project_variable_name)},
               'operator_random': {'indent': False, 'code': '{0}.math.pick_random_to({from}, {to})'.format(prefs.project_variable_name)},
                   'operator_lt': {'indent': False, 'code': '{0}.math.lt({operand1}, {operand2})'.format(prefs.project_variable_name)},
               'operator_equals': {'indent': False, 'code': '{0}.math.eq({operand1}, {operand2})'.format(prefs.project_variable_name)},
                   'operator_gt': {'indent': False, 'code': '{0}.math.gt({operand1}, {operand2})'.format(prefs.project_variable_name)},
                  'operator_and': {'indent': False, 'code': '{operand1} and {operand2}'},
                   'operator_or': {'indent': False, 'code': '{operand1} or {operand2}'},
                  'operator_not': {'indent': False, 'code': 'not {operand}'},
                 'operator_join': {'indent': False, 'code': '{0}.math.join({string1}, {string2})'.format(prefs.project_variable_name)},
            'operator_letter_of': {'indent': False, 'code': '{0}.math.letter({letter}, {string})'.format(prefs.project_variable_name)},
               'operator_length': {'indent': False, 'code': '{0}.math.len({string})'.format(prefs.project_variable_name)},
             'operator_contains': {'indent': False, 'code': '{0}.math.contains({string1}, {string2})'.format(prefs.project_variable_name)},
                  'operator_mod': {'indent': False, 'code': '{0}.math.mod({num1}, {num2})'.format(prefs.project_variable_name)},
                'operator_round': {'indent': False, 'code': '{0}.math.round({num})'.format(prefs.project_variable_name)},
               'operator_mathop': {'indent': False, 'code': '{0}.math.{operator}({num})'.format(prefs.project_variable_name)},
                 'data_variable': {'indent': False, 'code' :'{}.{0}{variable}'.format(prefs.attribute_variable_prefix)}, # add object reference
            'data_setvariableto': {'indent': True,  'code' :'{}.{0}{variable} = {value}'.format(prefs.attribute_variable_prefix)}, # add object reference
         'data_changevariableby': {'indent': True,  'code' :'{}.{0}{variable} += {value}'.format(prefs.attribute_variable_prefix)}, # add object reference
             'data_showvariable': {'indent': True,  'code': ''},
             'data_hidevariable': {'indent': True,  'code': ''},
             'data_listcontents': {'indent': False, 'code' :'*{}.{0}{list}'.format(prefs.attribute_variable_prefix)}, # add object reference
             'data_listindexall': {'indent': False, 'code': ''}, # not sure what does
          'data_listindexrandom': {'indent': False, 'code': ''},
                'data_addtolist': {'indent': True,  'code': '{}.{0}{list}.append(item)'.format(prefs.attribute_variable_prefix)}, # add object reference
             'data_deleteoflist': {'indent': True,  'code' :'del {}.{0}{list}[{index}-1]',
          'data_deletealloflist': {'indent': True,  'code' :'{}.{0}{list} = []'.format(prefs.attribute_variable_prefix)}, # add object reference
             'data_insertatlist': {'indent': True,  'code' :'{}.{0}{list}.insert({index}-1, {item})'.format(prefs.attribute_variable_prefix)}, # add object reference
        'data_replaceitemoflist': {'indent': True,  'code' :'{}.{0}{list}[{index}-1] = {item}'.format(prefs.attribute_variable_prefix)}, # add object reference
               'data_itemoflist': {'indent': False, 'code' :'{}.{0}{list}[{index}-1]'.format(prefs.attribute_variable_prefix)}, # add object reference
            'data_itemnumoflist': {'indent': True,  'code' :'{}.{0}{list}.index({item})'.format(prefs.attribute_variable_prefix)}, # add object reference
             'data_lengthoflist': {'indent': False, 'code' :'len({}.{0}{list})'.format(prefs.attribute_variable_prefix)}, # add object reference
         'data_listcontainsitem': {'indent': False, 'code' :'{item} in {}.{0}{list}'.format(prefs.attribute_variable_prefix)}, # add object reference
                 'data_showlist': {'indent': True,  'code': ''},
                 'data_hidelist': {'indent': True,  'code': ''},
}